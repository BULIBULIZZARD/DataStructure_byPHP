/*
````````线性结构``````````
O(1) 大O
0(n) 算法与n呈线性关系
渐进时间复杂度
描述n趋于无穷的情况

均摊时间复杂度
较能确定最坏情况出现概率

复杂度震荡 Eager->Lazy


Stack FILO
Undo
系统栈 中断入栈
括号匹配

Queue FIFO
循环队列
$data[$i] = $this->data[($i + $this->front) % sizeof($this->data)];

linkedList
dummyHead
~~

递归
将问题转化为更小的同一问题
->最基本的问题
链表问题大部分可以递归解决
数组链表[val,index]

````````树结构```````````
天然的组织结构
图书馆->
公司架构->
家谱->

检索高效 缩小搜索范围
二分搜索树 Binary Search Tree

__________
二叉树 动态数据结构
class Node{
    E e;
    Node left;
    Node right;
}
有一个唯一根节点
 left child
 right child
节点最多两个孩子
叶子节点 child null

二叉树 天然递归结构
满二叉树 除了叶子节点 都有两孩子节点
__________
二分搜索树 是二叉树
所有左子树所有节点值 小于根
所有右子树所有节点值 大于根

子树也是 二分搜索树
元素有可比较性

前序遍历 先访问节点 再左右 normal
中序遍历 左 节点 右   result ASC
后序遍历 左 右 节点  eg: BST释放内存
层序遍历

删除 使用前驱 或 后继 替换

``````````````````集合``````

不能存放相同元素

eg:客户统计 词汇量统计


```````````映射(字典)``````
dict
key -> value
存取(键 值) 数据对的数据结构

__________优先队列________
堆
二叉堆
完全二叉树 按层排列 从左到又
父节点 大于等于 孩子节点(最大堆)

数组存储二叉堆(完全二叉树)

索引堆

```````````线段树(区间树)``````
Segment Tree
区间问题
动态区间统计查询

平衡二叉树 叶子节点深度差不大于1

``````````字典树 前缀树 (Tire)```````
每个节点有若干指向下个节点的指针
前缀搜索
压缩字典树
三分字典树
``````````并查集``````````
size 优化 子节点少向子节点数高的根合并
rank 优化 深度低向深度低合并(排名)
路径压缩


``````````````AVL```````````
平衡二叉树 左子树和右子树高度不超过1

标注高度  平衡因子(高度差)

`````````````红黑树``````````
____2-3树

不是二叉树
节点存放 一个或两个元素
绝对平衡树

所有节点非红即黑
根节点为黑
最后的NULL节点为黑
红节点的孩子一定为黑
黑平衡(任一节点到叶子节点 经过黑色节点是一样多的)

`````````哈希表```````````
哈希函数  键 转换为 索引
哈希冲突
`空间换时间`
时间和空间的平衡

基本设计
大整数 模素数
浮点型 去点当整数用
字符串 转换成整形 n 进制的整形

原则
一致性 a==b  hash(a)==hash(b)
高效性 计算高效
均匀性 哈希值均匀

Java - hashCode
int crc32 ( string $str )

哈希冲突 - 链地址法 [Seperate Chaining]
开放地址法 平方检测 二次哈希
再哈希法


 */